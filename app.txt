frontend/app/(dashboard)/appointments.tsx:

contents:
import { useEffect, useState } from 'react';
import { View, Text, ScrollView, TouchableOpacity } from 'react-native';
import { Clock } from 'lucide-react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import BottomNav from './components/BottomNav';
import { styles } from './styles/appointmentsStyles';
import axios, { AxiosError } from 'axios';
import { Appointment } from '../type';

export default function AppointmentsScreen() {
  const [appointments, setAppointments] = useState<Appointment[]>([]);
  const backendUrl = 'http://192.168.1.224:5002/api'; // Replace with your actual IP

  useEffect(() => {
    const fetchAppointments = async () => {
      try {
        const response = await axios.get<Appointment[]>(`${backendUrl}/appointments`);
        setAppointments(response.data);
      } catch (error) {
        const axiosError = error as AxiosError;
        console.log('Error fetching appointments:', axiosError.response?.data);
      }
    };
    fetchAppointments();
  }, []);

  return (
    <SafeAreaView style={styles.safeArea}>
      <View style={styles.container}>
        <ScrollView contentContainerStyle={styles.content}>
          <Text style={styles.sectionTitle}>Appointments</Text>
          {appointments.length > 0 ? (
            appointments.map((appt, index) => (
              <View key={index} style={styles.appointmentCard}>
                <View style={styles.appointmentLeft}>
                  <View style={styles.appointmentDateBox}>
                    <Text style={styles.appointmentMonth}>
                      {new Date(appt.date).toLocaleString('default', { month: 'short' }).toUpperCase()}
                    </Text>
                    <Text style={styles.appointmentDay}>{new Date(appt.date).getDate()}</Text>
                  </View>
                  <View style={styles.appointmentDetails}>
                    <Text style={styles.appointmentTitle}>{appt.doctorName}</Text>
                    <Text style={styles.appointmentSpecialty}>{appt.specialty}</Text>
                    <View style={styles.appointmentTime}>
                      <Clock size={14} color="#666" />
                      <Text style={styles.appointmentTimeText}>{appt.time}</Text>
                    </View>
                  </View>
                </View>
                <TouchableOpacity style={styles.rescheduleButton}>
                  <Text style={styles.rescheduleText}>Reschedule</Text>
                </TouchableOpacity>
              </View>
            ))
          ) : (
            <Text>No appointments found.</Text>
          )}
        </ScrollView>
        <BottomNav />
      </View>
    </SafeAreaView>
  );
}

============================

frontend/app/(dashboard)/chatbot.tsx:

contents:
import { useState } from 'react';
import { View, Text, TextInput, TouchableOpacity, ScrollView } from 'react-native';
import { MessageSquare } from 'lucide-react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import BottomNav from './components/BottomNav';
import { styles } from './styles/chatbotStyles';
import axios, { AxiosError } from 'axios';
import { useAuth } from '../auth';

// Define the expected response type from OpenRouter
interface ChatResponse {
  choices: { message: { content: string } }[];
}

export default function ChatbotScreen() {
  const [messages, setMessages] = useState<{ role: string; content: string }[]>([
    { role: 'assistant', content: 'Hello! How can I assist you today?' },
  ]);
  const [input, setInput] = useState('');
  const { token } = useAuth();
  const backendUrl = 'http://192.168.1.224:5002/api'; // Replace with your actual IP

  const sendMessage = async () => {
    if (!input.trim()) return;

    const userMessage = { role: 'user', content: input };
    setMessages([...messages, userMessage]);
    setInput('');

    try {
      const response = await axios.post<ChatResponse>(
        `${backendUrl}/chatbot`,
        { message: input },
        {
          headers: {
            Authorization: `Bearer ${token}`, // Uncomment if protected
          },
        }
      );
      const botMessage = {
        role: 'assistant',
        content: response.data.choices[0].message.content,
      };
      setMessages((prev) => [...prev, botMessage]);
    } catch (error) {
      const axiosError = error as AxiosError;
      console.log('Error:', axiosError.response?.data);
      setMessages((prev) => [
        ...prev,
        { role: 'assistant', content: 'Sorry, something went wrong.' },
      ]);
    }
  };

  return (
    <SafeAreaView style={styles.safeArea}>
      <View style={styles.container}>
        <ScrollView contentContainerStyle={styles.chatContainerContent}>
          {messages.map((msg, index) => (
            <View
              key={index}
              style={[
                styles.message,
                msg.role === 'user' && { alignSelf: 'flex-end', backgroundColor: '#e3f2fd' },
              ]}
            >
              <Text style={styles.botText}>{msg.content}</Text>
            </View>
          ))}
        </ScrollView>
        <View style={styles.inputContainer}>
          <TextInput
            style={styles.input}
            placeholder="Type your message..."
            placeholderTextColor="#666"
            value={input}
            onChangeText={setInput}
          />
          <TouchableOpacity style={styles.sendButton} onPress={sendMessage}>
            <MessageSquare size={24} color="#fff" />
          </TouchableOpacity>
        </View>
        <BottomNav />
      </View>
    </SafeAreaView>
  );
}

============================

frontend/app/(dashboard)/components/BottomNav.tsx:

contents:
import { View, Text, TouchableOpacity } from 'react-native';
import { useRouter, usePathname } from 'expo-router';
import { Home, MessageSquare, Calendar, User, FileText } from 'lucide-react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { styles } from '../styles/bottomNavStyles'; // Import styles

export default function BottomNav() {
  const router = useRouter();
  const pathname = usePathname();

  return (
    <SafeAreaView edges={['bottom']} style={styles.safeArea}>
      <View style={styles.bottomNav}>
        <TouchableOpacity style={styles.navItem} onPress={() => router.push('/(dashboard)')}>
          <Home size={22} color={pathname === '/(dashboard)' ? '#4a55a2' : '#666'} />
          <Text style={[styles.navText, pathname === '/(dashboard)' && styles.navActive]}>Home</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.navItem} onPress={() => router.push('/(dashboard)/chatbot')}>
          <MessageSquare size={22} color={pathname === '/(dashboard)/chatbot' ? '#4a55a2' : '#666'} />
          <Text style={[styles.navText, pathname === '/(dashboard)/chatbot' && styles.navActive]}>Chatbot</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.navItem} onPress={() => router.push('/(dashboard)/appointments')}>
          <Calendar size={22} color={pathname === '/(dashboard)/appointments' ? '#4a55a2' : '#666'} />
          <Text style={[styles.navText, pathname === '/(dashboard)/appointments' && styles.navActive]}>Appointments</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.navItem} onPress={() => router.push('/(dashboard)/profile')}>
          <User size={22} color={pathname === '/(dashboard)/profile' ? '#4a55a2' : '#666'} />
          <Text style={[styles.navText, pathname === '/(dashboard)/profile' && styles.navActive]}>Profile</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.navItem} onPress={() => router.push('/(dashboard)/medicalhistory')}>
          <FileText size={22} color={pathname === '/(dashboard)/medicalhistory' ? '#4a55a2' : '#666'} />
          <Text style={[styles.navText, pathname === '/(dashboard)/medicalhistory' && styles.navActive]}>Medical History</Text>
        </TouchableOpacity>
      </View>
    </SafeAreaView>
  );
}

============================

frontend/app/(dashboard)/index.tsx:

contents:
import { useEffect, useState } from 'react';
import { View, Text, ScrollView, TouchableOpacity } from 'react-native';
import { useAuth } from '../auth';
import { Pill, Clock, Heart, Activity } from 'lucide-react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import BottomNav from './components/BottomNav';
import { styles } from './styles/dashboardStyles';
import axios, { AxiosError } from 'axios';
import { Appointment } from '../type';

export default function DashboardScreen() {
  const { logout, token } = useAuth();
  const [appointments, setAppointments] = useState<Appointment[]>([]);
  const backendUrl = 'http://192.168.1.224:5002/api'; // Replace with your actual IP

  useEffect(() => {
    const fetchAppointments = async () => {
      try {
        const response = await axios.get<Appointment[]>(`${backendUrl}/appointments`);
        setAppointments(response.data.slice(0, 1)); // Show only the first appointment
      } catch (error) {
        const axiosError = error as AxiosError;
        console.log('Error fetching appointments:', axiosError.response?.data);
      }
    };
    fetchAppointments();
  }, []);

  const handleLogout = () => {
    logout();
  };

  return (
    <SafeAreaView style={styles.safeArea}>
      <View style={styles.container}>
        <ScrollView contentContainerStyle={styles.scrollViewContent} showsVerticalScrollIndicator={false}>
          <View style={styles.summaryContainer}>
            <Text style={styles.sectionTitle}>Health Summary</Text>
            <View style={styles.statsGrid}>
              <View style={styles.statCard}>
                <Heart size={24} color="#e74c3c" />
                <Text style={styles.statValue}>72 BPM</Text>
                <Text style={styles.statLabel}>Heart Rate</Text>
              </View>
              <View style={styles.statCard}>
                <Activity size={24} color="#3498db" />
                <Text style={styles.statValue}>120/80</Text>
                <Text style={styles.statLabel}>Blood Pressure</Text>
              </View>
              <View style={styles.statCard}>
                <Clock size={24} color="#9b59b6" />
                <Text style={styles.statValue}>7.5 hrs</Text>
                <Text style={styles.statLabel}>Sleep</Text>
              </View>
            </View>
          </View>
          <View style={styles.appointmentsContainer}>
            <Text style={styles.sectionTitle}>Upcoming Appointments</Text>
            {appointments.length > 0 ? (
              appointments.map((appt, index) => (
                <View key={index} style={styles.appointmentCard}>
                  <View style={styles.appointmentLeft}>
                    <View style={styles.appointmentDateBox}>
                      <Text style={styles.appointmentMonth}>
                        {new Date(appt.date).toLocaleString('default', { month: 'short' }).toUpperCase()}
                      </Text>
                      <Text style={styles.appointmentDay}>{new Date(appt.date).getDate()}</Text>
                    </View>
                    <View style={styles.appointmentDetails}>
                      <Text style={styles.appointmentTitle}>{appt.doctorName}</Text>
                      <Text style={styles.appointmentSpecialty}>{appt.specialty}</Text>
                      <View style={styles.appointmentTime}>
                        <Clock size={14} color="#666" />
                        <Text style={styles.appointmentTimeText}>{appt.time}</Text>
                      </View>
                    </View>
                  </View>
                  <TouchableOpacity style={styles.rescheduleButton}>
                    <Text style={styles.rescheduleText}>Reschedule</Text>
                  </TouchableOpacity>
                </View>
              ))
            ) : (
              <Text>No upcoming appointments.</Text>
            )}
          </View>
          <TouchableOpacity style={styles.logoutButton} onPress={handleLogout}>
            <Text style={styles.logoutButtonText}>Logout</Text>
          </TouchableOpacity>
        </ScrollView>
        <BottomNav />
      </View>
    </SafeAreaView>
  );
}

============================

frontend/app/(dashboard)/medicalhistory.tsx:

contents:
import { View, Text, ScrollView } from 'react-native';
import { FileText } from 'lucide-react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import BottomNav from './components/BottomNav';
import { styles } from './styles/medicalHistoryStyles'; // Import styles

export default function MedicalHistoryScreen() {
  return (
    <SafeAreaView style={styles.safeArea}>
      <View style={styles.container}>
        <ScrollView contentContainerStyle={styles.content}>
          <Text style={styles.sectionTitle}>Medical History</Text>
          <View style={styles.recordCard}>
            <FileText size={24} color="#4a55a2" />
            <View style={styles.recordDetails}>
              <Text style={styles.recordTitle}>Annual Checkup</Text>
              <Text style={styles.recordDate}>March 10, 2025</Text>
              <Text style={styles.recordDescription}>Normal results, BP 120/80, HR 70 BPM</Text>
            </View>
          </View>
          <View style={styles.recordCard}>
            <FileText size={24} color="#4a55a2" />
            <View style={styles.recordDetails}>
              <Text style={styles.recordTitle}>Flu Shot</Text>
              <Text style={styles.recordDate}>October 15, 2024</Text>
              <Text style={styles.recordDescription}>Administered seasonal flu vaccine</Text>
            </View>
          </View>
        </ScrollView>
        <BottomNav />
      </View>
    </SafeAreaView>
  );
}

============================

frontend/app/(dashboard)/profile.tsx:

contents:
import React, { useEffect, useState } from 'react';
import { View, Text, ScrollView, Image } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import BottomNav from './components/BottomNav';
import { styles } from './styles/profileStyles';
import axios, { AxiosError } from 'axios';
import { useAuth } from '../auth';
import { Profile } from '../type';

export default function ProfileScreen() {
  const [profile, setProfile] = useState<Profile | null>(null);
  const { token } = useAuth();
  const backendUrl = 'http://192.168.1.224:5002/api'; // Replace with your actual IP

  useEffect(() => {
    if (!token) return;

    const fetchProfile = async () => {
      try {
        const response = await axios.get<Profile>(`${backendUrl}/profile`, {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });
        setProfile(response.data);
      } catch (error) {
        const axiosError = error as AxiosError;
        console.log('Error fetching profile:', axiosError.response?.data);
      }
    };
    fetchProfile();
  }, [token]);

  return (
    <SafeAreaView style={styles.safeArea}>
      <View style={styles.container}>
        <ScrollView contentContainerStyle={styles.content}>
          <Text style={styles.sectionTitle}>Profile</Text>
          {profile ? (
            <>
              <View style={styles.profileCard}>
                <Image source={{ uri: profile.imageUrl || 'https://via.placeholder.com/100' }} style={styles.profileImage} />
                <Text style={styles.profileName}>{profile.name || 'Unnamed'}</Text>
                <Text style={styles.profileEmail}>{profile.email}</Text>
              </View>
              <View style={styles.infoCard}>
                <Text style={styles.infoTitle}>Personal Information</Text>
                <Text style={styles.infoText}>Age: {profile.age || 'N/A'}</Text>
                <Text style={styles.infoText}>Phone: {profile.phone || 'N/A'}</Text>
                <Text style={styles.infoText}>Address: {profile.address || 'N/A'}</Text>
              </View>
            </>
          ) : (
            <Text>Loading...</Text>
          )}
        </ScrollView>
        <BottomNav />
      </View>
    </SafeAreaView>
  );
}

============================

frontend/app/(dashboard)/styles/appointmentsStyles.ts:

contents:
import { StyleSheet } from 'react-native';

export const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: '#f5f7fa',
  },
  container: {
    flex: 1,
  },
  content: {
    padding: 20,
    paddingBottom: 80, // Space for BottomNav
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 15,
    color: '#333',
  },
  appointmentCard: {
    backgroundColor: '#fff',
    borderRadius: 16,
    padding: 16,
    marginBottom: 12,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.05,
    shadowRadius: 10,
    elevation: 2,
  },
  appointmentLeft: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  appointmentDateBox: {
    backgroundColor: '#f0f4ff',
    borderRadius: 12,
    padding: 8,
    alignItems: 'center',
    justifyContent: 'center',
    width: 50,
    height: 60,
  },
  appointmentMonth: {
    fontSize: 12,
    fontWeight: 'bold',
    color: '#4a55a2',
  },
  appointmentDay: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#4a55a2',
  },
  appointmentDetails: {
    marginLeft: 12,
    flex: 1,
  },
  appointmentTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
  },
  appointmentSpecialty: {
    fontSize: 14,
    color: '#666',
    marginBottom: 4,
  },
  appointmentTime: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  appointmentTimeText: {
    fontSize: 12,
    color: '#666',
    marginLeft: 4,
  },
  rescheduleButton: {
    backgroundColor: '#f0f4ff',
    paddingVertical: 8,
    paddingHorizontal: 12,
    borderRadius: 8,
  },
  rescheduleText: {
    color: '#4a55a2',
    fontWeight: '500',
    fontSize: 12,
  },
});

============================

frontend/app/(dashboard)/styles/bottomNavStyles.ts:

contents:
import { StyleSheet } from 'react-native';

export const styles = StyleSheet.create({
  safeArea: {
    backgroundColor: '#fff',
  },
  bottomNav: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    alignItems: 'center',
    backgroundColor: '#fff',
    paddingVertical: 10,
    paddingHorizontal: 10,
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: -2 },
    shadowOpacity: 0.05,
    shadowRadius: 10,
    elevation: 5,
  },
  navItem: {
    alignItems: 'center',
    paddingHorizontal: 8,
  },
  navText: {
    fontSize: 10,
    marginTop: 4,
    color: '#666',
  },
  navActive: {
    color: '#4a55a2',
    fontWeight: 'bold',
  },
});

============================

frontend/app/(dashboard)/styles/chatbotStyles.ts:

contents:
import { StyleSheet } from 'react-native';

export const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: '#f5f7fa',
  },
  container: {
    flex: 1,
  },
  chatContainerContent: {
    padding: 20,
    paddingBottom: 80, // Space for BottomNav
  },
  message: {
    backgroundColor: '#fff',
    padding: 15,
    borderRadius: 10,
    marginBottom: 10,
    alignSelf: 'flex-start',
    maxWidth: '80%',
  },
  botText: {
    fontSize: 16,
    color: '#333',
  },
  inputContainer: {
    flexDirection: 'row',
    padding: 20,
    backgroundColor: '#fff',
    borderTopWidth: 1,
    borderColor: '#eee',
  },
  input: {
    flex: 1,
    height: 50,
    backgroundColor: '#f5f7fa',
    borderRadius: 25,
    paddingHorizontal: 20,
    fontSize: 16,
    color: '#333',
  },
  sendButton: {
    width: 50,
    height: 50,
    backgroundColor: '#4a55a2',
    borderRadius: 25,
    justifyContent: 'center',
    alignItems: 'center',
    marginLeft: 10,
  },
});

============================

frontend/app/(dashboard)/styles/dashboardStyles.ts:

contents:
import { StyleSheet } from 'react-native';

export const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: '#f5f7fa',
  },
  container: {
    flex: 1,
  },
  scrollViewContent: {
    paddingHorizontal: 20,
    paddingBottom: 80, // Space for BottomNav
  },
  summaryContainer: {
    marginTop: 20,
    marginBottom: 10,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 15,
    color: '#333',
  },
  statsGrid: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  statCard: {
    backgroundColor: '#fff',
    borderRadius: 16,
    padding: 16,
    width: '31%',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.05,
    shadowRadius: 10,
    elevation: 2,
  },
  statValue: {
    fontSize: 16,
    fontWeight: 'bold',
    marginTop: 8,
    marginBottom: 4,
    color: '#333',
  },
  statLabel: {
    fontSize: 12,
    color: '#666',
  },
  appointmentsContainer: {
    marginTop: 20,
  },
  appointmentCard: {
    backgroundColor: '#fff',
    borderRadius: 16,
    padding: 16,
    marginBottom: 12,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.05,
    shadowRadius: 10,
    elevation: 2,
  },
  appointmentLeft: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  appointmentDateBox: {
    backgroundColor: '#f0f4ff',
    borderRadius: 12,
    padding: 8,
    alignItems: 'center',
    justifyContent: 'center',
    width: 50,
    height: 60,
  },
  appointmentMonth: {
    fontSize: 12,
    fontWeight: 'bold',
    color: '#4a55a2',
  },
  appointmentDay: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#4a55a2',
  },
  appointmentDetails: {
    marginLeft: 12,
    flex: 1,
  },
  appointmentTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
  },
  appointmentSpecialty: {
    fontSize: 14,
    color: '#666',
    marginBottom: 4,
  },
  appointmentTime: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  appointmentTimeText: {
    fontSize: 12,
    color: '#666',
    marginLeft: 4,
  },
  rescheduleButton: {
    backgroundColor: '#f0f4ff',
    paddingVertical: 8,
    paddingHorizontal: 12,
    borderRadius: 8,
  },
  rescheduleText: {
    color: '#4a55a2',
    fontWeight: '500',
    fontSize: 12,
  },
  medicationsContainer: {
    marginTop: 20,
  },
  medicationCard: {
    backgroundColor: '#fff',
    borderRadius: 16,
    padding: 16,
    marginBottom: 12,
    flexDirection: 'row',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.05,
    shadowRadius: 10,
    elevation: 2,
  },
  medicationIcon: {
    width: 50,
    height: 50,
    borderRadius: 12,
    justifyContent: 'center',
    alignItems: 'center',
  },
  medicationDetails: {
    marginLeft: 12,
    flex: 1,
  },
  medicationName: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
  },
  medicationDosage: {
    fontSize: 14,
    color: '#666',
  },
  medicationTime: {
    alignItems: 'flex-end',
  },
  medicationTimeText: {
    fontSize: 14,
    color: '#666',
    marginBottom: 4,
  },
  medicationStatus: {
    backgroundColor: '#e8f5e9',
    paddingVertical: 4,
    paddingHorizontal: 8,
    borderRadius: 8,
  },
  medicationStatusText: {
    color: '#4caf50',
    fontWeight: '500',
    fontSize: 12,
  },
  medicationPending: {
    backgroundColor: '#fff8e1',
  },
  medicationPendingText: {
    color: '#ffc107',
    fontWeight: '500',
    fontSize: 12,
  },
  logoutButton: {
    backgroundColor: '#e74c3c',
    padding: 15,
    borderRadius: 8,
    alignItems: 'center',
    marginTop: 20,
  },
  logoutButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
});

============================

frontend/app/(dashboard)/styles/medicalHistoryStyles.ts:

contents:
import { StyleSheet } from 'react-native';

export const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: '#f5f7fa',
  },
  container: {
    flex: 1,
  },
  content: {
    padding: 20,
    paddingBottom: 80, // Space for BottomNav
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 15,
    color: '#333',
  },
  recordCard: {
    backgroundColor: '#fff',
    borderRadius: 16,
    padding: 16,
    marginBottom: 12,
    flexDirection: 'row',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.05,
    shadowRadius: 10,
    elevation: 2,
  },
  recordDetails: {
    marginLeft: 12,
    flex: 1,
  },
  recordTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
  },
  recordDate: {
    fontSize: 14,
    color: '#666',
    marginBottom: 4,
  },
  recordDescription: {
    fontSize: 14,
    color: '#666',
  },
});

============================

frontend/app/(dashboard)/styles/profileStyles.ts:

contents:
// frontend/app/(dashboard)/styles/profileStyles.ts
import { StyleSheet } from 'react-native';

export const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: '#f5f7fa',
  },
  container: {
    flex: 1,
  },
  content: {
    padding: 20,
    paddingBottom: 80, // Space for BottomNav
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 15,
    color: '#333',
  },
  profileCard: {
    backgroundColor: '#fff',
    borderRadius: 16,
    padding: 20,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.05,
    shadowRadius: 10,
    elevation: 2,
    marginBottom: 20,
  },
  profileImage: {
    width: 100,
    height: 100,
    borderRadius: 50,
    marginBottom: 15,
  },
  profileName: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333',
  },
  profileEmail: {
    fontSize: 16,
    color: '#666',
    marginTop: 5,
  },
  infoCard: {
    backgroundColor: '#fff',
    borderRadius: 16,
    padding: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.05,
    shadowRadius: 10,
    elevation: 2,
  },
  infoTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 10,
  },
  infoText: {
    fontSize: 16,
    color: '#666',
    marginBottom: 5,
  },
});

============================

frontend/app/_layout.tsx:

contents:
import React, { useEffect } from 'react';
import { Stack, router } from 'expo-router';
import { AuthProvider, useAuth } from './auth';

export default function RootLayout() {
  return (
    <AuthProvider>
      <RootLayoutNav />
    </AuthProvider>
  );
}

function RootLayoutNav() {
  const { isLoggedIn } = useAuth();

  useEffect(() => {
    if (!isLoggedIn) {
      router.replace('/login');
    } else {
      router.replace('/(dashboard)');
    }
  }, [isLoggedIn]);

  return (
    <Stack screenOptions={{ headerShown: false }}>
      <Stack.Screen name="login" />
      <Stack.Screen name="(dashboard)" />
    </Stack>
  );
}

============================

frontend/app/auth.tsx:

contents:
import React, { createContext, useContext, useState, useEffect } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';

interface AuthContextType {
  isLoggedIn: boolean;
  token: string | null;
  login: (token: string) => Promise<void>;
  logout: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [token, setToken] = useState<string | null>(null);

  // Load token from storage on app start
  useEffect(() => {
    const loadToken = async () => {
      const storedToken = await AsyncStorage.getItem('token');
      if (storedToken) {
        setToken(storedToken);
        setIsLoggedIn(true);
      }
    };
    loadToken();
  }, []);

  const login = async (newToken: string) => {
    await AsyncStorage.setItem('token', newToken);
    setToken(newToken);
    setIsLoggedIn(true);
  };

  const logout = async () => {
    await AsyncStorage.removeItem('token');
    setToken(null);
    setIsLoggedIn(false);
  };

  const authContext: AuthContextType = {
    isLoggedIn,
    token,
    login,
    logout,
  };

  return <AuthContext.Provider value={authContext}>{children}</AuthContext.Provider>;
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) throw new Error('useAuth must be used within an AuthProvider');
  return context;
};

============================

frontend/app/login.tsx:

contents:
import React, { useState } from 'react';
import {
  View,
  TextInput,
  StyleSheet,
  TouchableOpacity,
  KeyboardAvoidingView,
  Platform,
  ScrollView,
  Alert,
} from 'react-native';
import { Lock, User, Eye, EyeOff } from 'lucide-react-native';
import { ThemedText } from '@/components/ThemedText';
import { ThemedView } from '@/components/ThemedView';
import axios from 'axios';
import { useAuth } from './auth';

export default function LoginScreen() {
  const [email, setEmail] = useState(''); // Changed to email
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const { login } = useAuth();

  const backendUrl = 'http://192.168.1.224:5002/api'; 

  const handleLogin = async () => {
    if (!email || !password) {
      Alert.alert('Error', 'Please enter both email and password');
      return;
    }

    setIsLoading(true);
    try {
      const response = await axios.post(`${backendUrl}/auth/login`, {
        email, 
        password,
      });

      const { token } = response.data;
      await login(token); // Store token and set isLoggedIn
      Alert.alert('Success', 'Logged in successfully!');
    } catch (error: any) {
      let errorMessage = 'Login failed. Please check your credentials.';
      if (error.response) {
        errorMessage = error.response.data.message || errorMessage;
      } else if (error.request) {
        errorMessage = 'Network error. Please check your connection or IP address.';
      }
      Alert.alert('Error', errorMessage);
    } finally {
      setIsLoading(false);
    }
  };

  const handleForgotPassword = () => {
    Alert.alert('Forgot Password', 'This feature is coming soon!');
  };

  return (
    <KeyboardAvoidingView behavior={Platform.OS === 'ios' ? 'padding' : 'height'} style={styles.container}>
      <ScrollView contentContainerStyle={styles.scrollContainer}>
        <ThemedView style={styles.formContainer}>
          <View style={styles.inputContainer}>
            <ThemedText style={styles.label}>Email</ThemedText> {/* Changed to Email */}
            <View style={styles.inputWrapper}>
              <User size={20} color="#666" style={styles.inputIcon} />
              <TextInput
                placeholder="Enter email"
                value={email}
                onChangeText={setEmail}
                autoCapitalize="none"
                style={styles.input}
              />
            </View>
          </View>

          <View style={styles.inputContainer}>
            <ThemedText style={styles.label}>Password</ThemedText>
            <View style={styles.inputWrapper}>
              <Lock size={20} color="#666" style={styles.inputIcon} />
              <TextInput
                placeholder="Enter password"
                value={password}
                onChangeText={setPassword}
                secureTextEntry={!showPassword}
                style={styles.input}
              />
              <TouchableOpacity onPress={() => setShowPassword(!showPassword)} style={styles.eyeIcon}>
                {showPassword ? <EyeOff size={20} color="#666" /> : <Eye size={20} color="#666" />}
              </TouchableOpacity>
            </View>
          </View>

          <TouchableOpacity style={styles.forgotPassword} onPress={handleForgotPassword}>
            <ThemedText style={styles.forgotPasswordText}>Forgot Password?</ThemedText>
          </TouchableOpacity>

          <TouchableOpacity
            onPress={handleLogin}
            style={[styles.loginButton, isLoading && styles.loginButtonDisabled]}
            disabled={isLoading}
          >
            <ThemedText style={styles.loginButtonText}>
              {isLoading ? 'Signing in...' : 'Sign In'}
            </ThemedText>
          </TouchableOpacity>
        </ThemedView>
      </ScrollView>
    </KeyboardAvoidingView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f7fa',
  },
  scrollContainer: {
    flexGrow: 1,
    justifyContent: 'center',
    padding: 20,
  },
  formContainer: {
    backgroundColor: '#fff',
    borderRadius: 16,
    padding: 24,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 10,
    elevation: 5,
  },
  inputContainer: {
    marginBottom: 16,
  },
  label: {
    fontSize: 14,
    fontWeight: '500',
    marginBottom: 8,
    color: '#555',
  },
  inputWrapper: {
    flexDirection: 'row',
    alignItems: 'center',
    position: 'relative',
  },
  inputIcon: {
    position: 'absolute',
    left: 12,
    zIndex: 1,
  },
  input: {
    flex: 1,
    height: 50,
    paddingLeft: 40,
    backgroundColor: '#f5f7fa',
    borderRadius: 8,
    fontSize: 16,
    color: '#333',
  },
  eyeIcon: {
    position: 'absolute',
    right: 12,
    zIndex: 1,
  },
  forgotPassword: {
    alignSelf: 'flex-end',
    marginBottom: 24,
  },
  forgotPasswordText: {
    color: '#4a55a2',
    fontWeight: '500',
  },
  loginButton: {
    height: 50,
    backgroundColor: '#4a55a2',
    borderRadius: 8,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loginButtonDisabled: {
    backgroundColor: '#a0a8d6',
  },
  loginButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
});

============================

frontend/app/type.ts:

contents:
export interface Appointment {
    _id?: string; // Optional MongoDB ID
    doctorName: string;
    specialty: string; // Corrected from "speciality" to match backend
    date: string; // Assuming ISO string from backend
    time: string;
  }
  
  export interface Profile {
    _id?: string;
    name?: string;
    email: string;
    age?: number;
    phone?: string;
    address?: string;
    imageUrl?: string;
  }

